
Discarded input sections

 .text          0x00000000       0x58 build/main.o
 .data          0x00000000        0x0 build/main.o
 .bss           0x00000000        0x0 build/main.o
 .text.startup  0x00000000       0x50 build/main.o
 .debug_info    0x00000000      0x447 build/main.o
 .debug_abbrev  0x00000000      0x193 build/main.o
 .debug_loclists
                0x00000000       0x4c build/main.o
 .debug_aranges
                0x00000000       0x28 build/main.o
 .debug_rnglists
                0x00000000       0x28 build/main.o
 .debug_line    0x00000000      0x2b2 build/main.o
 .debug_str     0x00000000      0x286 build/main.o
 .comment       0x00000000       0x46 build/main.o
 .debug_frame   0x00000000       0x50 build/main.o
 .ARM.attributes
                0x00000000       0x2c build/main.o

Memory Configuration

Name             Origin             Length             Attributes
FLASH            0x00000000         0x00020000         xr
RAM              0x1ffff000         0x00004000         xrw
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD build/main.o
START GROUP
LOAD /Applications/ArmGNUToolchain/12.3.rel1/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/12.3.1/thumb/v6-m/nofp/libgcc.a
LOAD /Applications/ArmGNUToolchain/12.3.rel1/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/12.3.1/../../../../arm-none-eabi/lib/thumb/v6-m/nofp/libc.a
END GROUP
                0x00000400                        _stack_size = 0x400

.isr_vector     0x00000000        0x0
                0x00000000                        . = ALIGN (0x4)
 *(.isr_vector)
                0x00000000                        . = ALIGN (0x4)

.text           0x00000000        0x0
                0x00000000                        . = ALIGN (0x4)
 *(.text)
 *(.text*)
 *(.rodata)
 *(.rodata*)
                0x00000000                        . = ALIGN (0x4)

.glue_7         0x00000000        0x0
 .glue_7        0x00000000        0x0 linker stubs

.glue_7t        0x00000000        0x0
 .glue_7t       0x00000000        0x0 linker stubs

.vfp11_veneer   0x00000000        0x0
 .vfp11_veneer  0x00000000        0x0 linker stubs

.v4_bx          0x00000000        0x0
 .v4_bx         0x00000000        0x0 linker stubs

.rodata         0x00000000        0x0
                0x00000000                        . = ALIGN (0x4)
 *(.rodata)
 *(.rodata*)
                0x00000000                        . = ALIGN (0x4)

.preinit_array  0x00000000        0x0
                [!provide]                        PROVIDE (__preinit_array_start = .)
 *(.preinit_array)
                [!provide]                        PROVIDE (__preinit_array_end = .)

.init_array     0x00000000        0x0
                [!provide]                        PROVIDE (__init_array_start = .)
 *(SORT_BY_INIT_PRIORITY(.init_array.*) SORT_BY_INIT_PRIORITY(.ctors.*))
                [!provide]                        PROVIDE (__init_array_end = .)

.fini_array     0x00000000        0x0
                [!provide]                        PROVIDE (__fini_array_start = .)
 *(.fini_array)
                [!provide]                        PROVIDE (__fini_array_end = .)

.data           0x1ffff000        0x0 load address 0x20002c00
                0x1ffff000                        . = ALIGN (0x4)
                0x1ffff000                        __data_start__ = .
 *(.data)
 *(.data*)
                0x1ffff000                        . = ALIGN (0x4)
                0x1ffff000                        __data_end__ = .

.bss            0x1ffff000        0x0
                0x1ffff000                        . = ALIGN (0x4)
                0x1ffff000                        __bss_start__ = .
 *(.bss)
 *(.bss*)
 *(COMMON)
                0x1ffff000                        . = ALIGN (0x4)
                0x1ffff000                        __bss_end__ = .

.stack          0x1ffff000     0x3c00
                0x1ffff000                        . = ALIGN (0x4)
                0x20003000                        _estack = (ORIGIN (RAM) + LENGTH (RAM))
                0x20002c00                        . = (_estack - _stack_size)
 *fill*         0x1ffff000     0x3c00 
                0x20002c00                        . = ALIGN (0x4)
                0x1ffff000                        _edata = __data_end__
                0x1ffff000                        _sbss = __bss_start__
                0x1ffff000                        _ebss = __bss_end__
                0x1ffff000                        _sdata = __data_start__
                0x20002c00                        _sidata = __etext
                0x20002c00                        __etext = .
OUTPUT(build/main.elf elf32-littlearm)
LOAD linker stubs
